# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
POST /v2/entities with invalid types for varios fields

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. POST /v2/entities with non-string in entity::id
# 02. POST /v2/entities with non-string in entity::type
# 03. POST /v2/entities with non-string in attribute::type
# 04. POST /v2/entities with non-string in metadata::type
# 05. POST /v2/entities with JSON object in metadata::value
# 06. POST /v2/entities with invalid field in metadata
#
# FIXME P1: Once metadata::value can be a compound, step 06 must be removed.
#

echo "01. POST /v2/entities with non-string in entity::id"
echo "==================================================="
payload='{
  "type": "room",
  "id": false,
  "temperature": { "type": "AT", "value": 25 }
}'
orionCurl --url /v2/entities --payload "$payload" --json
echo
echo


echo "02. POST /v2/entities with non-string in entity::type"
echo "====================================================="
payload='{
  "type": false,
  "id": "E1",
  "temperature": 25
}'
orionCurl --url /v2/entities --payload "$payload" --json
echo
echo


echo "03. POST /v2/entities with non-string in attribute::type"
echo "========================================================"
payload='{
  "type": "room",
  "id": "E1",
  "temperature": { "type": false, "value": 25 }
}'
orionCurl --url /v2/entities --payload "$payload" --json
echo
echo


echo "04. POST /v2/entities with non-string in metadata::type"
echo "======================================================="
payload='{
  "type": "room",
  "id": "E1",
  "temperature": { "type": "AT", "value": 25, "metadata": { "meta": { "type": false, "value": "STRING" } } }
}'
orionCurl --url /v2/entities --payload "$payload" --json
echo
echo


echo "05. POST /v2/entities with JSON object in metadata::value"
echo "========================================================="
payload='{
  "type": "room",
  "id": "E1",
  "temperature": { "type": "AT", "value": 25, "metadata": { "meta": { "type": "md", "value": [ 1, 2, 3 ] } } }
}'
orionCurl --url /v2/entities --payload "$payload" --json
echo
echo


echo "06. POST /v2/entities with invalid field in metadata"
echo "===================================================="
payload='{
  "type": "room",
  "id": "E1",
  "temperature": { "type": "AT", "value": 25, "metadata": { "meta": { "type": "md", "value": 3, "invalid": true } } }
}'
orionCurl --url /v2/entities --payload "$payload" --json
echo
echo


--REGEXPECT--
01. POST /v2/entities with non-string in entity::id
===================================================
HTTP/1.1 400 Bad Request
Content-Length: 70
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "invalid JSON type for entity id",
    "error": "BadRequest"
}


02. POST /v2/entities with non-string in entity::type
=====================================================
HTTP/1.1 400 Bad Request
Content-Length: 72
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "invalid JSON type for entity type",
    "error": "BadRequest"
}


03. POST /v2/entities with non-string in attribute::type
========================================================
HTTP/1.1 400 Bad Request
Content-Length: 75
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "invalid JSON type for attribute type",
    "error": "BadRequest"
}


04. POST /v2/entities with non-string in metadata::type
=======================================================
HTTP/1.1 400 Bad Request
Content-Length: 84
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "invalid JSON type for attribute metadata type",
    "error": "BadRequest"
}


05. POST /v2/entities with JSON object in metadata::value
=========================================================
HTTP/1.1 400 Bad Request
Content-Length: 85
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "invalid JSON type for attribute metadata value",
    "error": "BadRequest"
}


06. POST /v2/entities with invalid field in metadata
====================================================
HTTP/1.1 400 Bad Request
Content-Length: 80
Content-Type: application/json
Date: REGEX(.*)

{
    "description": "invalid JSON field for attribute metadata",
    "error": "BadRequest"
}


--TEARDOWN--
brokerStop CB
dbDrop CB
