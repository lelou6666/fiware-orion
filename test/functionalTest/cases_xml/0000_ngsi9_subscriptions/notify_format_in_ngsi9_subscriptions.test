# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Subscriptions For NGSI9

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart

--SHELL--

#
# The format for Subscriptions are sent in either JSON or XML, depending on two things:
# 1. The URI parameter notifyFormat
# 2. The format that the subscription in sent in
#
# The URI parameter notifyFormat (1) overrides format that the subscription in sent in (2).
#
# So, we have a number of combinations here:
# 1. Create a subscription in JSON, without using URI parameter notifyFormat - see notification in JSON
# 2. Create a subscription in XML, without using URI parameter notifyFormat - see notification in XML
# 3. Create a subscription in JSON, with URI parameter notifyFormat in JSON - see notification in JSON
# 4. Create a subscription in JSON, with URI parameter notifyFormat in XML - see notification in XML
# 5. Create a subscription in XML, with URI parameter notifyFormat in JSON - see notification in JSON
# 6. Create a subscription in XML, with URI parameter notifyFormat in XML - see notification in XML
#
# 
# TEST PLAN:
# 0.1. Availability-Subscribe to E1/A0 in JSON, with invalid notifyFormat=ABCD
# 0.2. Availability-Subscribe to E1/A0 in XML, with invalid notifyFormat=ABCD
#
# 1.1. Register E1/T1/A1
# 1.2. Availability-Subscribe to E1/A1 in JSON 
# 1.3. Dump accumulator to see notification of A1 in JSON, as the subscription was done in JSON
# 1.4. Reset the accumulator
# 1.5. Update subscription using XML
# 1.6. Dump accumulator to see notification of A1 in XML, as the subscription-update was done in XML
# 1.7. Reset the accumulator
# 1.8. Update subscription using XML but with notifyFormat=JSON
# 1.9. Dump accumulator to see notification of A1 in JSON, as the subscription-update was done with notifyFormat=JSON
# 1.10. Reset the accumulator
#
# 2.1. Register E1/T1/A2
# 2.2. Availability-Subscribe to E1/A2 in XML
# 2.3. Dump accumulator to see notification of A2 in XML, as the subscription was done in XML
# 2.4. Reset the accumulator
#
# 3.1. Register E1/T1/A3
# 3.2. Availability-Subscribe to E1/A3 in JSON, with URI parameter notifyFormat=JSON
# 3.3. Dump accumulator to see notification of A3 in JSON, as URI parameter notifyFormat was JSON
# 3.4. Reset the accumulator
#
# 4.1. Register E1/T1/A4
# 4.2. Availability-Subscribe to E1/A4 in JSON, with URI parameter notifyFormat=XML
# 4.3. Dump accumulator to see notification of A4 in XML, as URI parameter notifyFormat was XML
# 4.4. Reset the accumulator
#
# 5.1. Register E1/T1/A5
# 5.2. Availability-Subscribe to E1/A5 in XML, with URI parameter notifyFormat=JSON
# 5.3. Dump accumulator to see notification of A5 in JSON, as URI parameter notifyFormat was JSON
# 5.4. Reset the accumulator
#
# 6.1. Register E1/T1/A6
# 6.2. Availability-Subscribe to E1/A6 in XML, with URI parameter notifyFormat=XML
# 6.3. Dump accumulator to see notification of A6 in XML, as URI parameter notifyFormat was XML
# 6.4. Reset the accumulator
#
#
# FIXME (See github issue #898) These tests about updated subscription should be added to this test
# 
#   1.5. Update subscription using XML
#   1.6. Dump accumulator to see notification of A1 in XML, as the subscription-update was done in XML
#   1.7. Reset the accumulator
#   1.8. Update subscription using XML but with notifyFormat=JSON
#   1.9. Dump accumulator to see notification of A1 in JSON, as the subscription-update was done with notifyFormat=JSON
#   1.10. Reset the accumulator
# 


echo "0.1. Availability-Subscribe to E1/A0 in JSON, with invalid notifyFormat=ABCD"
echo "============================================================================"
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "attributes": [
    "A0"
  ], 
  "reference": "http://localhost:'${LISTENER_PORT}'/notify",
  "duration": "P1M"
}'
orionCurl --url /v1/registry/subscribeContextAvailability?notifyFormat=ABCD --payload "$payload" --json
echo
echo


echo "0.2. Availability-Subscribe to E1/A0 in XML, with invalid notifyFormat=ABCD"
echo "==========================================================================="
payload='<?xml version="1.0"?>
<subscribeContextAvailabilityRequest>
  <entityIdList>
    <entityId type="T1" isPattern="false">
      <id>E1</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>A0</attribute>
  </attributeList>
  <reference>http://localhost:'${LISTENER_PORT}'/notify</reference>
  <duration>PT5H</duration>
</subscribeContextAvailabilityRequest>'
orionCurl --url /v1/registry/subscribeContextAvailability?notifyFormat=ABCD --payload "$payload"
echo
echo


echo "1.1. Register E1/T1/A1"
echo "======================"
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "id":   "E1",
         "type": "T1"
      }
    ],
    "attributes": [
      {
        "name": "A1",
        "type": "string",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://localhost:'${LISTENER_PORT}'/notify"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --json
REG_ID=$(echo "$_response" | grep -Po '(?<="registrationId" : ")[^"]*')
echo
echo


echo "1.2. Availability-Subscribe to E1/A1 in JSON"
echo "============================================"
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "attributes": [
    "A1"
  ], 
  "reference": "http://localhost:'${LISTENER_PORT}'/notify",
  "duration": "P1M"
}'
orionCurl --url /v1/registry/subscribeContextAvailability --payload "$payload" --json
SUB_ID=$(echo "$_response" | grep subscriptionId | awk -F\" '{ print $4 }')
echo
echo


echo "1.3. Dump accumulator to see notification of A1 in JSON, as the subscription was done in JSON"
echo "============================================================================================="
sleep 1
accumulatorDump
echo
echo


echo "1.4. Reset the accumulator"
echo "=========================="
curl localhost:${LISTENER_PORT}/reset -s -S -X POST
accumulatorDump
echo
echo


echo "1.5. Update subscription using XML"
echo "=================================="
payload='<?xml version="1.0"?>
<updateContextAvailabilitySubscriptionRequest>
  <entityIdList>
    <entityId type="T1">
      <id>E1</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>A1</attribute>
    <attribute>A2</attribute>
    <attribute>A3</attribute>
  </attributeList>
  <duration>PT2M</duration>
  <subscriptionId>'$SUB_ID'</subscriptionId>
</updateContextAvailabilitySubscriptionRequest>'
orionCurl --url "/v1/registry/updateContextAvailabilitySubscription" --payload "$payload"
echo
echo


echo "1.6. Dump accumulator to see notification of A1 in XML, as the subscription-update was done in XML"
echo "=================================================================================================="
sleep 1
accumulatorDump
echo
echo


echo "1.7. Reset the accumulator"
echo "=========================="
curl localhost:${LISTENER_PORT}/reset -s -S -X POST
accumulatorDump
echo
echo


echo "1.8. Update subscription using XML but with notifyFormat=JSON"
echo "============================================================="
payload='<?xml version="1.0"?>
<updateContextAvailabilitySubscriptionRequest>
  <entityIdList>
    <entityId type="T1">
      <id>E1</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>A1</attribute>
    <attribute>A2</attribute>
    <attribute>A3</attribute>
  </attributeList>
  <duration>PT2M</duration>
  <subscriptionId>'$SUB_ID'</subscriptionId>
</updateContextAvailabilitySubscriptionRequest>'
orionCurl --url "/v1/registry/updateContextAvailabilitySubscription?notifyFormat=JSON" --payload "$payload"
echo
echo


echo "1.9. Dump accumulator to see notification of A1 in JSON, as the subscription-update was done with notifyFormat=JSON"
echo "==================================================================================================================="
sleep 1
accumulatorDump
echo
echo


echo "1.10. Reset the accumulator"
echo "==========================="
curl localhost:${LISTENER_PORT}/reset -s -S -X POST
echo
echo


echo "2.1. Register E1/T1/A2"
echo "======================"
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "id":   "E1",
         "type": "T1"
      }
    ],
    "attributes": [
      {
        "name": "A2",
        "type": "string",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://localhost:'${LISTENER_PORT}'/notify"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --json
echo
echo


echo "2.2. Availability-Subscribe to E1/A2 in XML"
echo "==========================================="
payload='<?xml version="1.0"?>
<subscribeContextAvailabilityRequest>
  <entityIdList>
    <entityId type="T1" isPattern="false">
      <id>E1</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>A2</attribute>
  </attributeList>
  <reference>http://localhost:'${LISTENER_PORT}'/notify</reference>
  <duration>PT5H</duration>
</subscribeContextAvailabilityRequest>'
orionCurl --url /v1/registry/subscribeContextAvailability --payload "$payload"
echo
echo


echo "2.3. Dump accumulator to see notification of A2 in XML, as the subscription was done in XML"
echo "==========================================================================================="
sleep 1
accumulatorDump
echo
echo


echo "2.4. Reset the accumulator"
echo "=========================="
curl localhost:${LISTENER_PORT}/reset -s -S -X POST
accumulatorDump
echo
echo


echo "3.1. Register E1/T1/A3"
echo "======================"
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "id":   "E1",
         "type": "T1"
      }
    ],
    "attributes": [
      {
        "name": "A3",
        "type": "string",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://localhost:'${LISTENER_PORT}'/notify"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --json
echo
echo


echo "3.2. Availability-Subscribe to E1/A3 in JSON, with URI parameter notifyFormat=JSON"
echo "=================================================================================="
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "attributes": [
    "A3"
  ], 
  "reference": "http://localhost:'${LISTENER_PORT}'/notify",
  "duration": "P1M"
}'
orionCurl --url /v1/registry/subscribeContextAvailability?notifyFormat=JSON --payload "$payload" --json
echo
echo


echo "3.3. Dump accumulator to see notification of A3 in JSON, as URI parameter notifyFormat was JSON"
echo "==============================================================================================="
sleep 1
accumulatorDump
echo
echo


echo "3.4. Reset the accumulator"
echo "=========================="
curl localhost:${LISTENER_PORT}/reset -s -S -X POST
accumulatorDump
echo
echo


echo "4.1. Register E1/T1/A4"
echo "======================"
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "id":   "E1",
         "type": "T1"
      }
    ],
    "attributes": [
      {
        "name": "A4",
        "type": "string",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://localhost:'${LISTENER_PORT}'/notify"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --json
echo
echo


echo "4.2. Availability-Subscribe to E1/A4 in JSON, with URI parameter notifyFormat=XML"
echo "================================================================================="
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "attributes": [
    "A4"
  ], 
  "reference": "http://localhost:'${LISTENER_PORT}'/notify",
  "duration": "P1M"
}'
orionCurl --url /v1/registry/subscribeContextAvailability?notifyFormat=XML --payload "$payload" --json
echo
echo


echo "4.3. Dump accumulator to see notification of A4 in XML, as URI parameter notifyFormat was XML"
echo "============================================================================================="
sleep 1
accumulatorDump
echo
echo


echo "4.4. Reset the accumulator"
echo "=========================="
curl localhost:${LISTENER_PORT}/reset -s -S -X POST
accumulatorDump
echo
echo


echo "5.1. Register E1/T1/A5"
echo "======================"
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "id":   "E1",
         "type": "T1"
      }
    ],
    "attributes": [
      {
        "name": "A5",
        "type": "string",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://localhost:'${LISTENER_PORT}'/notify"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --json
echo
echo


echo "5.2. Availability-Subscribe to E1/A5 in XML, with URI parameter notifyFormat=JSON"
echo "================================================================================="
payload='<?xml version="1.0"?>
<subscribeContextAvailabilityRequest>
  <entityIdList>
    <entityId type="T1" isPattern="false">
      <id>E1</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>A5</attribute>
  </attributeList>
  <reference>http://localhost:'${LISTENER_PORT}'/notify</reference>
  <duration>PT5H</duration>
</subscribeContextAvailabilityRequest>'
orionCurl --url /v1/registry/subscribeContextAvailability?notifyFormat=JSON --payload "$payload"
echo
echo


echo "5.3. Dump accumulator to see notification of A5 in JSON, as URI parameter notifyFormat was JSON"
echo "==============================================================================================="
sleep 1
accumulatorDump
echo
echo


echo "5.4. Reset the accumulator"
echo "=========================="
curl localhost:${LISTENER_PORT}/reset -s -S -X POST
accumulatorDump
echo
echo


echo "6.1. Register E1/T1/A6"
echo "======================"
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "id":   "E1",
         "type": "T1"
      }
    ],
    "attributes": [
      {
        "name": "A6",
        "type": "string",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://localhost:'${LISTENER_PORT}'/notify"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --json
echo
echo


echo "6.2. Availability-Subscribe to E1/A6 in XML, with URI parameter notifyFormat=XML"
echo "================================================================================"
payload='<?xml version="1.0"?>
<subscribeContextAvailabilityRequest>
  <entityIdList>
    <entityId type="T1" isPattern="false">
      <id>E1</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>A6</attribute>
  </attributeList>
  <reference>http://localhost:'${LISTENER_PORT}'/notify</reference>
  <duration>PT5H</duration>
</subscribeContextAvailabilityRequest>'
orionCurl --url /v1/registry/subscribeContextAvailability?notifyFormat=XML --payload "$payload"
echo
echo


echo "6.3. Dump accumulator to see notification of A6 in XML, as URI parameter notifyFormat was XML"
echo "============================================================================================="
sleep 1
accumulatorDump
echo
echo


echo "6.4. Reset the accumulator"
echo "=========================="
curl localhost:${LISTENER_PORT}/reset -s -S -X POST
accumulatorDump
echo
echo


--REGEXPECT--
0.1. Availability-Subscribe to E1/A0 in JSON, with invalid notifyFormat=ABCD
============================================================================
HTTP/1.1 400 Bad Request
Content-Length: 165
Content-Type: application/json
Date: REGEX(.*)

{
    "orionError": {
        "code": "400", 
        "details": "Bad notification format: /ABCD/. Valid values: /XML/ and /JSON/", 
        "reasonPhrase": "Bad Request"
    }
}


0.2. Availability-Subscribe to E1/A0 in XML, with invalid notifyFormat=ABCD
===========================================================================
HTTP/1.1 400 Bad Request
Content-Length: 174
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<orionError>
  <code>400</code>
  <reasonPhrase>Bad Request</reasonPhrase>
  <details>Bad notification format: /ABCD/. Valid values: /XML/ and /JSON/</details>
</orionError>


1.1. Register E1/T1/A1
======================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


1.2. Availability-Subscribe to E1/A1 in JSON
============================================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "subscriptionId": "REGEX([0-9a-f]{24})"
}


1.3. Dump accumulator to see notification of A1 in JSON, as the subscription was done in JSON
=============================================================================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 505
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "contextRegistrationResponses" : [
    {
      "contextRegistration" : {
        "entities" : [
          {
            "type" : "T1",
            "isPattern" : "false",
            "id" : "E1"
          }
        ],
        "attributes" : [
          {
            "name" : "A1",
            "type" : "string",
            "isDomain" : "false"
          }
        ],
        "providingApplication" : "http://localhost:REGEX(\d+)/notify"
      }
    }
  ]
}
=======================================


1.4. Reset the accumulator
==========================


1.5. Update subscription using XML
==================================
HTTP/1.1 200 OK
Content-Length: 185
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<updateContextAvailabilitySubscriptionResponse>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <duration>PT2M</duration>
</updateContextAvailabilitySubscriptionResponse>


1.6. Dump accumulator to see notification of A1 in XML, as the subscription-update was done in XML
==================================================================================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 823
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/xml

<notifyContextAvailabilityRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="T1" isPattern="false">
            <id>E1</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>A1</name>
            <type>string</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:REGEX(\d+)/notify</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</notifyContextAvailabilityRequest>
=======================================


1.7. Reset the accumulator
==========================


1.8. Update subscription using XML but with notifyFormat=JSON
=============================================================
HTTP/1.1 200 OK
Content-Length: 185
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<updateContextAvailabilitySubscriptionResponse>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <duration>PT2M</duration>
</updateContextAvailabilitySubscriptionResponse>


1.9. Dump accumulator to see notification of A1 in JSON, as the subscription-update was done with notifyFormat=JSON
===================================================================================================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 505
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "contextRegistrationResponses" : [
    {
      "contextRegistration" : {
        "entities" : [
          {
            "type" : "T1",
            "isPattern" : "false",
            "id" : "E1"
          }
        ],
        "attributes" : [
          {
            "name" : "A1",
            "type" : "string",
            "isDomain" : "false"
          }
        ],
        "providingApplication" : "http://localhost:REGEX(\d+)/notify"
      }
    }
  ]
}
=======================================


1.10. Reset the accumulator
===========================


2.1. Register E1/T1/A2
======================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


2.2. Availability-Subscribe to E1/A2 in XML
===========================================
HTTP/1.1 200 OK
Content-Length: 167
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<subscribeContextAvailabilityResponse>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <duration>PT5H</duration>
</subscribeContextAvailabilityResponse>


2.3. Dump accumulator to see notification of A2 in XML, as the subscription was done in XML
===========================================================================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 823
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/xml

<notifyContextAvailabilityRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="T1" isPattern="false">
            <id>E1</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>A2</name>
            <type>string</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:REGEX(\d+)/notify</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</notifyContextAvailabilityRequest>
=======================================


2.4. Reset the accumulator
==========================


3.1. Register E1/T1/A3
======================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


3.2. Availability-Subscribe to E1/A3 in JSON, with URI parameter notifyFormat=JSON
==================================================================================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "subscriptionId": "REGEX([0-9a-f]{24})"
}


3.3. Dump accumulator to see notification of A3 in JSON, as URI parameter notifyFormat was JSON
===============================================================================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 505
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "contextRegistrationResponses" : [
    {
      "contextRegistration" : {
        "entities" : [
          {
            "type" : "T1",
            "isPattern" : "false",
            "id" : "E1"
          }
        ],
        "attributes" : [
          {
            "name" : "A3",
            "type" : "string",
            "isDomain" : "false"
          }
        ],
        "providingApplication" : "http://localhost:REGEX(\d+)/notify"
      }
    }
  ]
}
=======================================


3.4. Reset the accumulator
==========================


4.1. Register E1/T1/A4
======================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


4.2. Availability-Subscribe to E1/A4 in JSON, with URI parameter notifyFormat=XML
=================================================================================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "subscriptionId": "REGEX([0-9a-f]{24})"
}


4.3. Dump accumulator to see notification of A4 in XML, as URI parameter notifyFormat was XML
=============================================================================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 823
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/xml

<notifyContextAvailabilityRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="T1" isPattern="false">
            <id>E1</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>A4</name>
            <type>string</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:REGEX(\d+)/notify</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</notifyContextAvailabilityRequest>
=======================================


4.4. Reset the accumulator
==========================


5.1. Register E1/T1/A5
======================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


5.2. Availability-Subscribe to E1/A5 in XML, with URI parameter notifyFormat=JSON
=================================================================================
HTTP/1.1 200 OK
Content-Length: 167
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<subscribeContextAvailabilityResponse>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <duration>PT5H</duration>
</subscribeContextAvailabilityResponse>


5.3. Dump accumulator to see notification of A5 in JSON, as URI parameter notifyFormat was JSON
===============================================================================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 505
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "contextRegistrationResponses" : [
    {
      "contextRegistration" : {
        "entities" : [
          {
            "type" : "T1",
            "isPattern" : "false",
            "id" : "E1"
          }
        ],
        "attributes" : [
          {
            "name" : "A5",
            "type" : "string",
            "isDomain" : "false"
          }
        ],
        "providingApplication" : "http://localhost:REGEX(\d+)/notify"
      }
    }
  ]
}
=======================================


5.4. Reset the accumulator
==========================


6.1. Register E1/T1/A6
======================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


6.2. Availability-Subscribe to E1/A6 in XML, with URI parameter notifyFormat=XML
================================================================================
HTTP/1.1 200 OK
Content-Length: 167
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<subscribeContextAvailabilityResponse>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <duration>PT5H</duration>
</subscribeContextAvailabilityResponse>


6.3. Dump accumulator to see notification of A6 in XML, as URI parameter notifyFormat was XML
=============================================================================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 823
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/xml

<notifyContextAvailabilityRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="T1" isPattern="false">
            <id>E1</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>A6</name>
            <type>string</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:REGEX(\d+)/notify</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</notifyContextAvailabilityRequest>
=======================================


6.4. Reset the accumulator
==========================


--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
