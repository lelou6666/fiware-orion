# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ConvOp postSubscribeContextConvOp: POST /v1/contextSubscriptions

--SHELL-INIT--
dbInit CB
brokerStart CB 0
accumulatorStart

--SHELL--

#
# 01. Subscribe to E1/T1:ONCHANGE (POST /v1/contextSubscriptions)
# 02. Create E1/T2
# 03. Dump accumulator to see NOTHING
# 04. Create E1/T1
# 05. Dump accumulator to see E1/T1
# 06. Subscribe to E1/T1, forcing XML notifications (POST /v1/contextSubscriptions?notifyFormat=XML)
# 07. Dump accumulator to see E1/T1, one in JSON, one in XML
#
# FIXME: Once NGSI10 Subscriptions implement Restrictions 'exist=entity::type' and '!exist=entity::type'
# 06. Subscribe to E2/<empty>:ONCHANGE (POST /v1/contextSubscriptions?!exist=entity::type)
# 07. Create E2/<empty>
# 08. Create E2/T1
# 09. Dump accumulator to see 'E2/<empty>' only
# 10. Reset accumulator
# 11. Subscribe to E2/<non-empty>
# 12. Dump accumulator to see 'E2/T1' only
# 13. Reset accumulator
# 14. Subscribe to E2/<non-empty>:ONCHANGE (POST /v1/contextSubscriptions?exist=entity::type)
# 15. Dump accumulator to see 'E2/T1' only
# 16. Reset accumulator
# 17. Update E2/T1
# 18. Dump accumulator to see one notification of 'E2/T1' only
#

echo "01. Subscribe to E1/T1:ONCHANGE (POST /v1/contextSubscriptions)"
echo "==============================================================="
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "reference": "http://localhost:'$LISTENER_PORT'/notify",
  "duration": "P5Y",
  "throttling": "P5Y",
  "notifyConditions": [
    {
      "type": "ONCHANGE",
      "condValues": [
        "A1"
      ]
    }
  ]
}'
orionCurl --url /v1/contextSubscriptions --payload "$payload" --json
echo
echo


echo "02. Create E1/T2"
echo "================"
payload='{
  "contextElements": [
    {
      "id":   "E1",
      "type": "T2",
      "attributes" : [
        {
          "name" : "A1",
          "type" : "a",
          "value" : "E1/T2/A1"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --json
echo
echo


echo "03. Dump accumulator to see NOTHING"
echo "==================================="
accumulatorDump
echo
echo


echo "04. Create E1/T1"
echo "================"
payload='{
  "contextElements": [
    {
      "id":   "E1",
      "type": "T1",
      "attributes" : [
        {
          "name" : "A1",
          "type" : "a",
          "value" : "E1/T1/A1"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --json
echo
echo


echo "05. Dump accumulator to see E1/T1"
echo "================================="
accumulatorDump
echo
echo


echo "06. Subscribe to E1/T1, forcing XML notifications (POST /v1/contextSubscriptions?notifyFormat=XML)"
echo "=================================================================================================="
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "reference": "http://localhost:'$LISTENER_PORT'/notify",
  "duration": "P5Y",
  "throttling": "P5Y",
  "notifyConditions": [
    {
      "type": "ONCHANGE",
      "condValues": [
        "A1"
      ]
    }
  ]
}'
orionCurl --url /v1/contextSubscriptions?notifyFormat=XML --payload "$payload" --json
echo
echo

echo "07. Dump accumulator to see E1/T1, one in JSON, one in XML"
echo "=========================================================="
accumulatorDump
echo
echo


--REGEXPECT--
01. Subscribe to E1/T1:ONCHANGE (POST /v1/contextSubscriptions)
===============================================================
HTTP/1.1 200 OK
Content-Length: 134
Content-Type: application/json
Date: REGEX(.*)

{
    "subscribeResponse": {
        "duration": "P5Y", 
        "subscriptionId": "REGEX([0-9a-f]{24})", 
        "throttling": "P5Y"
    }
}


02. Create E1/T2
================
HTTP/1.1 200 OK
Content-Length: 378
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1", 
                        "type": "a", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T2"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


03. Dump accumulator to see NOTHING
===================================


04. Create E1/T1
================
HTTP/1.1 200 OK
Content-Length: 378
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1", 
                        "type": "a", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


05. Dump accumulator to see E1/T1
=================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 465
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "originator" : "localhost",
  "contextResponses" : [
    {
      "contextElement" : {
        "type" : "T1",
        "isPattern" : "false",
        "id" : "E1",
        "attributes" : [
          {
            "name" : "A1",
            "type" : "a",
            "value" : "E1/T1/A1"
          }
        ]
      },
      "statusCode" : {
        "code" : "200",
        "reasonPhrase" : "OK"
      }
    }
  ]
}
=======================================


06. Subscribe to E1/T1, forcing XML notifications (POST /v1/contextSubscriptions?notifyFormat=XML)
==================================================================================================
HTTP/1.1 200 OK
Content-Length: 134
Content-Type: application/json
Date: REGEX(.*)

{
    "subscribeResponse": {
        "duration": "P5Y", 
        "subscriptionId": "REGEX([0-9a-f]{24})", 
        "throttling": "P5Y"
    }
}


07. Dump accumulator to see E1/T1, one in JSON, one in XML
==========================================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 465
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "originator" : "localhost",
  "contextResponses" : [
    {
      "contextElement" : {
        "type" : "T1",
        "isPattern" : "false",
        "id" : "E1",
        "attributes" : [
          {
            "name" : "A1",
            "type" : "a",
            "value" : "E1/T1/A1"
          }
        ]
      },
      "statusCode" : {
        "code" : "200",
        "reasonPhrase" : "OK"
      }
    }
  ]
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 719
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/xml

<notifyContextRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <originator>localhost</originator>
  <contextResponseList>
    <contextElementResponse>
      <contextElement>
        <entityId type="T1" isPattern="false">
          <id>E1</id>
        </entityId>
        <contextAttributeList>
          <contextAttribute>
            <name>A1</name>
            <type>a</type>
            <contextValue>E1/T1/A1</contextValue>
          </contextAttribute>
        </contextAttributeList>
      </contextElement>
      <statusCode>
        <code>200</code>
        <reasonPhrase>OK</reasonPhrase>
      </statusCode>
    </contextElementResponse>
  </contextResponseList>
</notifyContextRequest>
=======================================


--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
