# Copyright 2014 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Query SEQ with attributes as JSON objects and compound values

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--
echo "1: Append entity E1 with two different attributes A1 and A2, with compound values"
url="/v1/updateContext"
payload='<?xml version="1.0" encoding="UTF-8"?>
<updateContextRequest>
  <contextElementList>
    <contextElement>
      <entityId type="Test" isPattern="false">
        <id>E1</id>
      </entityId>
      <contextAttributeList>
        <contextAttribute>
          <name>A1</name>
          <type>test</type>
          <contextValue>
            <compound>
              <a>1</a>
              <b>2</b>
              <c>3</c>
            </compound>
          </contextValue>
        </contextAttribute>
        <contextAttribute>
          <name>A2</name>
          <type>test</type>
          <contextValue type="vector">
            <item>a</item>
            <item>b</item>
            <item>c</item>
          </contextValue>
        </contextAttribute>
      </contextAttributeList>
    </contextElement>
  </contextElementList>
  <updateAction>APPEND</updateAction>
</updateContextRequest>'
orionCurl --url "$url" --payload "$payload" --out json
echo
echo

echo "2. JsonAttributeObjectQuery for the entity E1 for attributes A1 and A2, with compound values"
url="/v1/queryContext"
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Test" isPattern="false">
      <id>E1</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>A1</attribute>
    <attribute>A2</attribute>
  </attributeList>
</queryContextRequest>'
orionCurl --url "$url" --payload "$payload" --urlParams attributeFormat=object --out json
echo
echo

--REGEXPECT--
1: Append entity E1 with two different attributes A1 and A2, with compound values
HTTP/1.1 200 OK
Content-Length: 489
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1", 
                        "type": "test", 
                        "value": ""
                    }, 
                    {
                        "name": "A2", 
                        "type": "test", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "Test"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


2. JsonAttributeObjectQuery for the entity E1 for attributes A1 and A2, with compound values
HTTP/1.1 200 OK
Content-Length: 656
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": {
                    "A1": {
                        "type": "test", 
                        "value": {
                            "compound": {
                                "a": "1", 
                                "b": "2", 
                                "c": "3"
                            }
                        }
                    }, 
                    "A2": {
                        "type": "test", 
                        "value": [
                            "a", 
                            "b", 
                            "c"
                        ]
                    }
                }, 
                "id": "E1", 
                "isPattern": "false", 
                "type": "Test"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


--TEARDOWN--
brokerStop CB
dbDrop CB
