# Copyright 2014 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
HTTPS simple test

--SHELL-INIT--
dbInit CB
${SCRIPT_HOME}/httpsPrepare.sh --keyFileName /tmp/harnessTest.key --certFileName /tmp/harnessTest.pem
extraParams="-https -key /tmp/harnessTest.key -cert /tmp/harnessTest.pem"

export BROKER_AWAIT_SLEEP_TIME=6
brokerStart CB 0-255 IPV4 "$extraParams"
unset BROKER_AWAIT_SLEEP_TIME

--SHELL--
#
# Register a Sensor of temperature
#
echo "+++ 1: Register a Sensor of temperature"
url="/v1/registry/registerContext"
payload='<?xml version="1.0"?>
<registerContextRequest>
  <contextRegistrationList>
    <contextRegistration>
      <entityIdList>
        <entityId type="Sensor" isPattern="false">
          <id>Sensor5</id>      
        </entityId>
      </entityIdList>
      <contextRegistrationAttributeList>
        <contextRegistrationAttribute>
          <name>temperature</name>
          <isDomain>false</isDomain>
        </contextRegistrationAttribute>
      </contextRegistrationAttributeList>
      <providingApplication>http://kz.org</providingApplication>
    </contextRegistration>
  </contextRegistrationList>
  <duration>PT1H</duration>
</registerContextRequest>'
orionCurl --host "https://localhost" --url "$url" --payload "${payload}" "--cacert /tmp/harnessTest.pem"

echo
echo

#
# Discovery
#
echo "+++ 2: Discover the Sensor of temperature"
url="/v1/registry/discoverContextAvailability"
payload='<?xml version="1.0"?>
<discoverContextAvailabilityRequest>
  <entityIdList>
    <entityId type="Sensor" isPattern="false">
      <id>Sensor5</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>temperature</attribute>
  </attributeList>
</discoverContextAvailabilityRequest>'
orionCurl --host "https://localhost" --url "$url" --payload "${payload}" "--cacert /tmp/harnessTest.pem"


--REGEXPECT--
+++ 1: Register a Sensor of temperature
HTTP/1.1 200 OK
Content-Length: 141
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<registerContextResponse>
  <duration>PT1H</duration>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
</registerContextResponse>


+++ 2: Discover the Sensor of temperature
HTTP/1.1 200 OK
Content-Length: 766
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="Sensor" isPattern="false">
            <id>Sensor5</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>temperature</name>
            <type/>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://kz.org</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>
--TEARDOWN--
brokerStop CB
rm -f /tmp/harnessTest.key /tmp/harnessTest.pem
dbDrop CB
